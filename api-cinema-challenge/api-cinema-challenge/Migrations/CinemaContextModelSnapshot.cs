// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api_cinema_challenge.Data;

#nullable disable

namespace api_cinema_challenge.Migrations
{
    [DbContext(typeof(CinemaContext))]
    partial class CinemaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api_cinema_challenge.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8112),
                            Email = "Amail@email.no",
                            Name = "Jensemann",
                            Phone = "12345678",
                            UpdatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8203)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8210),
                            Email = "Bmail@email.no",
                            Name = "Kristian",
                            Phone = "12345679",
                            UpdatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8215)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8220),
                            Email = "Cmail@email.no",
                            Name = "Mahmoud",
                            Phone = "12345670",
                            UpdatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8223)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8226),
                            Email = "Dmail@email.no",
                            Name = "Aziz",
                            Phone = "12345648",
                            UpdatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8229)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8233),
                            Email = "Email@email.no",
                            Name = "Henrik",
                            Phone = "12245678",
                            UpdatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8236)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<int>("RuntimeMins")
                        .HasColumnType("integer")
                        .HasColumnName("runtimeMins");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8388),
                            Description = "Another one of these",
                            Rating = 10,
                            RuntimeMins = 90,
                            Title = "Indiana Jones",
                            UpdatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8392)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8397),
                            Description = "Goated",
                            Rating = 13,
                            RuntimeMins = 2000,
                            Title = "Lord Of The Rings",
                            UpdatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8401)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8405),
                            Description = "Order 66",
                            Rating = 18,
                            RuntimeMins = 110,
                            Title = "Star Wars",
                            UpdatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8408)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8412),
                            Description = ".....",
                            Rating = 16,
                            RuntimeMins = 87,
                            Title = "Fight Club",
                            UpdatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8415)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("screening_id");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ScreenNumber")
                        .HasColumnType("integer")
                        .HasColumnName("screennumber");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MovieId = 1,
                            Capacity = 60,
                            CreatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8440),
                            ScreenNumber = 1,
                            StartsAt = new DateTime(2024, 2, 6, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8436),
                            UpdatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8443)
                        },
                        new
                        {
                            Id = 2,
                            MovieId = 2,
                            Capacity = 90,
                            CreatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8449),
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 6, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8448),
                            UpdatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8451)
                        },
                        new
                        {
                            Id = 3,
                            MovieId = 3,
                            Capacity = 60,
                            CreatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8456),
                            ScreenNumber = 1,
                            StartsAt = new DateTime(2024, 2, 7, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8455),
                            UpdatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8459)
                        },
                        new
                        {
                            Id = 4,
                            MovieId = 4,
                            Capacity = 90,
                            CreatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8463),
                            ScreenNumber = 2,
                            StartsAt = new DateTime(2024, 2, 7, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8462),
                            UpdatedAt = new DateTime(2024, 2, 5, 12, 26, 2, 862, DateTimeKind.Utc).AddTicks(8466)
                        });
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Screening", b =>
                {
                    b.HasOne("api_cinema_challenge.Models.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("api_cinema_challenge.Models.Movie", b =>
                {
                    b.Navigation("Screenings");
                });
#pragma warning restore 612, 618
        }
    }
}
